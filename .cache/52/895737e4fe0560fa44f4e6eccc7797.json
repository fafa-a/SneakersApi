{"id":"../node_modules/http-cache-semantics/index.js","dependencies":[{"name":"C:\\Users\\fable\\Documents\\Works\\SneakersApi\\package.json","includedInParent":true,"mtime":1602453222475},{"name":"C:\\Users\\fable\\Documents\\Works\\SneakersApi\\node_modules\\http-cache-semantics\\package.json","includedInParent":true,"mtime":1602453627776}],"generated":{"js":"'use strict';\n// rfc7231 6.1\nconst statusCodeCacheableByDefault = new Set([\n    200,\n    203,\n    204,\n    206,\n    300,\n    301,\n    404,\n    405,\n    410,\n    414,\n    501,\n]);\n\n// This implementation does not understand partial responses (206)\nconst understoodStatuses = new Set([\n    200,\n    203,\n    204,\n    300,\n    301,\n    302,\n    303,\n    307,\n    308,\n    404,\n    405,\n    410,\n    414,\n    501,\n]);\n\nconst errorStatusCodes = new Set([\n    500,\n    502,\n    503, \n    504,\n]);\n\nconst hopByHopHeaders = {\n    date: true, // included, because we add Age update Date\n    connection: true,\n    'keep-alive': true,\n    'proxy-authenticate': true,\n    'proxy-authorization': true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n};\n\nconst excludedFromRevalidationUpdate = {\n    // Since the old body is reused, it doesn't make sense to change properties of the body\n    'content-length': true,\n    'content-encoding': true,\n    'transfer-encoding': true,\n    'content-range': true,\n};\n\nfunction toNumberOrZero(s) {\n    const n = parseInt(s, 10);\n    return isFinite(n) ? n : 0;\n}\n\n// RFC 5861\nfunction isErrorResponse(response) {\n    // consider undefined response as faulty\n    if(!response) {\n        return true\n    }\n    return errorStatusCodes.has(response.status);\n}\n\nfunction parseCacheControl(header) {\n    const cc = {};\n    if (!header) return cc;\n\n    // TODO: When there is more than one value present for a given directive (e.g., two Expires header fields, multiple Cache-Control: max-age directives),\n    // the directive's value is considered invalid. Caches are encouraged to consider responses that have invalid freshness information to be stale\n    const parts = header.trim().split(/\\s*,\\s*/); // TODO: lame parsing\n    for (const part of parts) {\n        const [k, v] = part.split(/\\s*=\\s*/, 2);\n        cc[k] = v === undefined ? true : v.replace(/^\"|\"$/g, ''); // TODO: lame unquoting\n    }\n\n    return cc;\n}\n\nfunction formatCacheControl(cc) {\n    let parts = [];\n    for (const k in cc) {\n        const v = cc[k];\n        parts.push(v === true ? k : k + '=' + v);\n    }\n    if (!parts.length) {\n        return undefined;\n    }\n    return parts.join(', ');\n}\n\nmodule.exports = class CachePolicy {\n    constructor(\n        req,\n        res,\n        {\n            shared,\n            cacheHeuristic,\n            immutableMinTimeToLive,\n            ignoreCargoCult,\n            _fromObject,\n        } = {}\n    ) {\n        if (_fromObject) {\n            this._fromObject(_fromObject);\n            return;\n        }\n\n        if (!res || !res.headers) {\n            throw Error('Response headers missing');\n        }\n        this._assertRequestHasHeaders(req);\n\n        this._responseTime = this.now();\n        this._isShared = shared !== false;\n        this._cacheHeuristic =\n            undefined !== cacheHeuristic ? cacheHeuristic : 0.1; // 10% matches IE\n        this._immutableMinTtl =\n            undefined !== immutableMinTimeToLive\n                ? immutableMinTimeToLive\n                : 24 * 3600 * 1000;\n\n        this._status = 'status' in res ? res.status : 200;\n        this._resHeaders = res.headers;\n        this._rescc = parseCacheControl(res.headers['cache-control']);\n        this._method = 'method' in req ? req.method : 'GET';\n        this._url = req.url;\n        this._host = req.headers.host;\n        this._noAuthorization = !req.headers.authorization;\n        this._reqHeaders = res.headers.vary ? req.headers : null; // Don't keep all request headers if they won't be used\n        this._reqcc = parseCacheControl(req.headers['cache-control']);\n\n        // Assume that if someone uses legacy, non-standard uncecessary options they don't understand caching,\n        // so there's no point stricly adhering to the blindly copy&pasted directives.\n        if (\n            ignoreCargoCult &&\n            'pre-check' in this._rescc &&\n            'post-check' in this._rescc\n        ) {\n            delete this._rescc['pre-check'];\n            delete this._rescc['post-check'];\n            delete this._rescc['no-cache'];\n            delete this._rescc['no-store'];\n            delete this._rescc['must-revalidate'];\n            this._resHeaders = Object.assign({}, this._resHeaders, {\n                'cache-control': formatCacheControl(this._rescc),\n            });\n            delete this._resHeaders.expires;\n            delete this._resHeaders.pragma;\n        }\n\n        // When the Cache-Control header field is not present in a request, caches MUST consider the no-cache request pragma-directive\n        // as having the same effect as if \"Cache-Control: no-cache\" were present (see Section 5.2.1).\n        if (\n            res.headers['cache-control'] == null &&\n            /no-cache/.test(res.headers.pragma)\n        ) {\n            this._rescc['no-cache'] = true;\n        }\n    }\n\n    now() {\n        return Date.now();\n    }\n\n    storable() {\n        // The \"no-store\" request directive indicates that a cache MUST NOT store any part of either this request or any response to it.\n        return !!(\n            !this._reqcc['no-store'] &&\n            // A cache MUST NOT store a response to any request, unless:\n            // The request method is understood by the cache and defined as being cacheable, and\n            ('GET' === this._method ||\n                'HEAD' === this._method ||\n                ('POST' === this._method && this._hasExplicitExpiration())) &&\n            // the response status code is understood by the cache, and\n            understoodStatuses.has(this._status) &&\n            // the \"no-store\" cache directive does not appear in request or response header fields, and\n            !this._rescc['no-store'] &&\n            // the \"private\" response directive does not appear in the response, if the cache is shared, and\n            (!this._isShared || !this._rescc.private) &&\n            // the Authorization header field does not appear in the request, if the cache is shared,\n            (!this._isShared ||\n                this._noAuthorization ||\n                this._allowsStoringAuthenticated()) &&\n            // the response either:\n            // contains an Expires header field, or\n            (this._resHeaders.expires ||\n                // contains a max-age response directive, or\n                // contains a s-maxage response directive and the cache is shared, or\n                // contains a public response directive.\n                this._rescc['max-age'] ||\n                (this._isShared && this._rescc['s-maxage']) ||\n                this._rescc.public ||\n                // has a status code that is defined as cacheable by default\n                statusCodeCacheableByDefault.has(this._status))\n        );\n    }\n\n    _hasExplicitExpiration() {\n        // 4.2.1 Calculating Freshness Lifetime\n        return (\n            (this._isShared && this._rescc['s-maxage']) ||\n            this._rescc['max-age'] ||\n            this._resHeaders.expires\n        );\n    }\n\n    _assertRequestHasHeaders(req) {\n        if (!req || !req.headers) {\n            throw Error('Request headers missing');\n        }\n    }\n\n    satisfiesWithoutRevalidation(req) {\n        this._assertRequestHasHeaders(req);\n\n        // When presented with a request, a cache MUST NOT reuse a stored response, unless:\n        // the presented request does not contain the no-cache pragma (Section 5.4), nor the no-cache cache directive,\n        // unless the stored response is successfully validated (Section 4.3), and\n        const requestCC = parseCacheControl(req.headers['cache-control']);\n        if (requestCC['no-cache'] || /no-cache/.test(req.headers.pragma)) {\n            return false;\n        }\n\n        if (requestCC['max-age'] && this.age() > requestCC['max-age']) {\n            return false;\n        }\n\n        if (\n            requestCC['min-fresh'] &&\n            this.timeToLive() < 1000 * requestCC['min-fresh']\n        ) {\n            return false;\n        }\n\n        // the stored response is either:\n        // fresh, or allowed to be served stale\n        if (this.stale()) {\n            const allowsStale =\n                requestCC['max-stale'] &&\n                !this._rescc['must-revalidate'] &&\n                (true === requestCC['max-stale'] ||\n                    requestCC['max-stale'] > this.age() - this.maxAge());\n            if (!allowsStale) {\n                return false;\n            }\n        }\n\n        return this._requestMatches(req, false);\n    }\n\n    _requestMatches(req, allowHeadMethod) {\n        // The presented effective request URI and that of the stored response match, and\n        return (\n            (!this._url || this._url === req.url) &&\n            this._host === req.headers.host &&\n            // the request method associated with the stored response allows it to be used for the presented request, and\n            (!req.method ||\n                this._method === req.method ||\n                (allowHeadMethod && 'HEAD' === req.method)) &&\n            // selecting header fields nominated by the stored response (if any) match those presented, and\n            this._varyMatches(req)\n        );\n    }\n\n    _allowsStoringAuthenticated() {\n        //  following Cache-Control response directives (Section 5.2.2) have such an effect: must-revalidate, public, and s-maxage.\n        return (\n            this._rescc['must-revalidate'] ||\n            this._rescc.public ||\n            this._rescc['s-maxage']\n        );\n    }\n\n    _varyMatches(req) {\n        if (!this._resHeaders.vary) {\n            return true;\n        }\n\n        // A Vary header field-value of \"*\" always fails to match\n        if (this._resHeaders.vary === '*') {\n            return false;\n        }\n\n        const fields = this._resHeaders.vary\n            .trim()\n            .toLowerCase()\n            .split(/\\s*,\\s*/);\n        for (const name of fields) {\n            if (req.headers[name] !== this._reqHeaders[name]) return false;\n        }\n        return true;\n    }\n\n    _copyWithoutHopByHopHeaders(inHeaders) {\n        const headers = {};\n        for (const name in inHeaders) {\n            if (hopByHopHeaders[name]) continue;\n            headers[name] = inHeaders[name];\n        }\n        // 9.1.  Connection\n        if (inHeaders.connection) {\n            const tokens = inHeaders.connection.trim().split(/\\s*,\\s*/);\n            for (const name of tokens) {\n                delete headers[name];\n            }\n        }\n        if (headers.warning) {\n            const warnings = headers.warning.split(/,/).filter(warning => {\n                return !/^\\s*1[0-9][0-9]/.test(warning);\n            });\n            if (!warnings.length) {\n                delete headers.warning;\n            } else {\n                headers.warning = warnings.join(',').trim();\n            }\n        }\n        return headers;\n    }\n\n    responseHeaders() {\n        const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);\n        const age = this.age();\n\n        // A cache SHOULD generate 113 warning if it heuristically chose a freshness\n        // lifetime greater than 24 hours and the response's age is greater than 24 hours.\n        if (\n            age > 3600 * 24 &&\n            !this._hasExplicitExpiration() &&\n            this.maxAge() > 3600 * 24\n        ) {\n            headers.warning =\n                (headers.warning ? `${headers.warning}, ` : '') +\n                '113 - \"rfc7234 5.5.4\"';\n        }\n        headers.age = `${Math.round(age)}`;\n        headers.date = new Date(this.now()).toUTCString();\n        return headers;\n    }\n\n    /**\n     * Value of the Date response header or current time if Date was invalid\n     * @return timestamp\n     */\n    date() {\n        const serverDate = Date.parse(this._resHeaders.date);\n        if (isFinite(serverDate)) {\n            return serverDate;\n        }\n        return this._responseTime;\n    }\n\n    /**\n     * Value of the Age header, in seconds, updated for the current time.\n     * May be fractional.\n     *\n     * @return Number\n     */\n    age() {\n        let age = this._ageValue();\n\n        const residentTime = (this.now() - this._responseTime) / 1000;\n        return age + residentTime;\n    }\n\n    _ageValue() {\n        return toNumberOrZero(this._resHeaders.age);\n    }\n\n    /**\n     * Value of applicable max-age (or heuristic equivalent) in seconds. This counts since response's `Date`.\n     *\n     * For an up-to-date value, see `timeToLive()`.\n     *\n     * @return Number\n     */\n    maxAge() {\n        if (!this.storable() || this._rescc['no-cache']) {\n            return 0;\n        }\n\n        // Shared responses with cookies are cacheable according to the RFC, but IMHO it'd be unwise to do so by default\n        // so this implementation requires explicit opt-in via public header\n        if (\n            this._isShared &&\n            (this._resHeaders['set-cookie'] &&\n                !this._rescc.public &&\n                !this._rescc.immutable)\n        ) {\n            return 0;\n        }\n\n        if (this._resHeaders.vary === '*') {\n            return 0;\n        }\n\n        if (this._isShared) {\n            if (this._rescc['proxy-revalidate']) {\n                return 0;\n            }\n            // if a response includes the s-maxage directive, a shared cache recipient MUST ignore the Expires field.\n            if (this._rescc['s-maxage']) {\n                return toNumberOrZero(this._rescc['s-maxage']);\n            }\n        }\n\n        // If a response includes a Cache-Control field with the max-age directive, a recipient MUST ignore the Expires field.\n        if (this._rescc['max-age']) {\n            return toNumberOrZero(this._rescc['max-age']);\n        }\n\n        const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;\n\n        const serverDate = this.date();\n        if (this._resHeaders.expires) {\n            const expires = Date.parse(this._resHeaders.expires);\n            // A cache recipient MUST interpret invalid date formats, especially the value \"0\", as representing a time in the past (i.e., \"already expired\").\n            if (Number.isNaN(expires) || expires < serverDate) {\n                return 0;\n            }\n            return Math.max(defaultMinTtl, (expires - serverDate) / 1000);\n        }\n\n        if (this._resHeaders['last-modified']) {\n            const lastModified = Date.parse(this._resHeaders['last-modified']);\n            if (isFinite(lastModified) && serverDate > lastModified) {\n                return Math.max(\n                    defaultMinTtl,\n                    ((serverDate - lastModified) / 1000) * this._cacheHeuristic\n                );\n            }\n        }\n\n        return defaultMinTtl;\n    }\n\n    timeToLive() {\n        const age = this.maxAge() - this.age();\n        const staleIfErrorAge = age + toNumberOrZero(this._rescc['stale-if-error']);\n        const staleWhileRevalidateAge = age + toNumberOrZero(this._rescc['stale-while-revalidate']);\n        return Math.max(0, age, staleIfErrorAge, staleWhileRevalidateAge) * 1000;\n    }\n\n    stale() {\n        return this.maxAge() <= this.age();\n    }\n\n    _useStaleIfError() {\n        return this.maxAge() + toNumberOrZero(this._rescc['stale-if-error']) > this.age();\n    }\n\n    useStaleWhileRevalidate() {\n        return this.maxAge() + toNumberOrZero(this._rescc['stale-while-revalidate']) > this.age();\n    }\n\n    static fromObject(obj) {\n        return new this(undefined, undefined, { _fromObject: obj });\n    }\n\n    _fromObject(obj) {\n        if (this._responseTime) throw Error('Reinitialized');\n        if (!obj || obj.v !== 1) throw Error('Invalid serialization');\n\n        this._responseTime = obj.t;\n        this._isShared = obj.sh;\n        this._cacheHeuristic = obj.ch;\n        this._immutableMinTtl =\n            obj.imm !== undefined ? obj.imm : 24 * 3600 * 1000;\n        this._status = obj.st;\n        this._resHeaders = obj.resh;\n        this._rescc = obj.rescc;\n        this._method = obj.m;\n        this._url = obj.u;\n        this._host = obj.h;\n        this._noAuthorization = obj.a;\n        this._reqHeaders = obj.reqh;\n        this._reqcc = obj.reqcc;\n    }\n\n    toObject() {\n        return {\n            v: 1,\n            t: this._responseTime,\n            sh: this._isShared,\n            ch: this._cacheHeuristic,\n            imm: this._immutableMinTtl,\n            st: this._status,\n            resh: this._resHeaders,\n            rescc: this._rescc,\n            m: this._method,\n            u: this._url,\n            h: this._host,\n            a: this._noAuthorization,\n            reqh: this._reqHeaders,\n            reqcc: this._reqcc,\n        };\n    }\n\n    /**\n     * Headers for sending to the origin server to revalidate stale response.\n     * Allows server to return 304 to allow reuse of the previous response.\n     *\n     * Hop by hop headers are always stripped.\n     * Revalidation headers may be added or removed, depending on request.\n     */\n    revalidationHeaders(incomingReq) {\n        this._assertRequestHasHeaders(incomingReq);\n        const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers);\n\n        // This implementation does not understand range requests\n        delete headers['if-range'];\n\n        if (!this._requestMatches(incomingReq, true) || !this.storable()) {\n            // revalidation allowed via HEAD\n            // not for the same resource, or wasn't allowed to be cached anyway\n            delete headers['if-none-match'];\n            delete headers['if-modified-since'];\n            return headers;\n        }\n\n        /* MUST send that entity-tag in any cache validation request (using If-Match or If-None-Match) if an entity-tag has been provided by the origin server. */\n        if (this._resHeaders.etag) {\n            headers['if-none-match'] = headers['if-none-match']\n                ? `${headers['if-none-match']}, ${this._resHeaders.etag}`\n                : this._resHeaders.etag;\n        }\n\n        // Clients MAY issue simple (non-subrange) GET requests with either weak validators or strong validators. Clients MUST NOT use weak validators in other forms of request.\n        const forbidsWeakValidators =\n            headers['accept-ranges'] ||\n            headers['if-match'] ||\n            headers['if-unmodified-since'] ||\n            (this._method && this._method != 'GET');\n\n        /* SHOULD send the Last-Modified value in non-subrange cache validation requests (using If-Modified-Since) if only a Last-Modified value has been provided by the origin server.\n        Note: This implementation does not understand partial responses (206) */\n        if (forbidsWeakValidators) {\n            delete headers['if-modified-since'];\n\n            if (headers['if-none-match']) {\n                const etags = headers['if-none-match']\n                    .split(/,/)\n                    .filter(etag => {\n                        return !/^\\s*W\\//.test(etag);\n                    });\n                if (!etags.length) {\n                    delete headers['if-none-match'];\n                } else {\n                    headers['if-none-match'] = etags.join(',').trim();\n                }\n            }\n        } else if (\n            this._resHeaders['last-modified'] &&\n            !headers['if-modified-since']\n        ) {\n            headers['if-modified-since'] = this._resHeaders['last-modified'];\n        }\n\n        return headers;\n    }\n\n    /**\n     * Creates new CachePolicy with information combined from the previews response,\n     * and the new revalidation response.\n     *\n     * Returns {policy, modified} where modified is a boolean indicating\n     * whether the response body has been modified, and old cached body can't be used.\n     *\n     * @return {Object} {policy: CachePolicy, modified: Boolean}\n     */\n    revalidatedPolicy(request, response) {\n        this._assertRequestHasHeaders(request);\n        if(this._useStaleIfError() && isErrorResponse(response)) {  // I consider the revalidation request unsuccessful\n          return {\n            modified: false,\n            matches: false,\n            policy: this,\n          };\n        }\n        if (!response || !response.headers) {\n            throw Error('Response headers missing');\n        }\n\n        // These aren't going to be supported exactly, since one CachePolicy object\n        // doesn't know about all the other cached objects.\n        let matches = false;\n        if (response.status !== undefined && response.status != 304) {\n            matches = false;\n        } else if (\n            response.headers.etag &&\n            !/^\\s*W\\//.test(response.headers.etag)\n        ) {\n            // \"All of the stored responses with the same strong validator are selected.\n            // If none of the stored responses contain the same strong validator,\n            // then the cache MUST NOT use the new response to update any stored responses.\"\n            matches =\n                this._resHeaders.etag &&\n                this._resHeaders.etag.replace(/^\\s*W\\//, '') ===\n                    response.headers.etag;\n        } else if (this._resHeaders.etag && response.headers.etag) {\n            // \"If the new response contains a weak validator and that validator corresponds\n            // to one of the cache's stored responses,\n            // then the most recent of those matching stored responses is selected for update.\"\n            matches =\n                this._resHeaders.etag.replace(/^\\s*W\\//, '') ===\n                response.headers.etag.replace(/^\\s*W\\//, '');\n        } else if (this._resHeaders['last-modified']) {\n            matches =\n                this._resHeaders['last-modified'] ===\n                response.headers['last-modified'];\n        } else {\n            // If the new response does not include any form of validator (such as in the case where\n            // a client generates an If-Modified-Since request from a source other than the Last-Modified\n            // response header field), and there is only one stored response, and that stored response also\n            // lacks a validator, then that stored response is selected for update.\n            if (\n                !this._resHeaders.etag &&\n                !this._resHeaders['last-modified'] &&\n                !response.headers.etag &&\n                !response.headers['last-modified']\n            ) {\n                matches = true;\n            }\n        }\n\n        if (!matches) {\n            return {\n                policy: new this.constructor(request, response),\n                // Client receiving 304 without body, even if it's invalid/mismatched has no option\n                // but to reuse a cached body. We don't have a good way to tell clients to do\n                // error recovery in such case.\n                modified: response.status != 304,\n                matches: false,\n            };\n        }\n\n        // use other header fields provided in the 304 (Not Modified) response to replace all instances\n        // of the corresponding header fields in the stored response.\n        const headers = {};\n        for (const k in this._resHeaders) {\n            headers[k] =\n                k in response.headers && !excludedFromRevalidationUpdate[k]\n                    ? response.headers[k]\n                    : this._resHeaders[k];\n        }\n\n        const newResponse = Object.assign({}, response, {\n            status: this._status,\n            method: this._method,\n            headers,\n        });\n        return {\n            policy: new this.constructor(request, newResponse, {\n                shared: this._isShared,\n                cacheHeuristic: this._cacheHeuristic,\n                immutableMinTimeToLive: this._immutableMinTtl,\n            }),\n            modified: false,\n            matches: true,\n        };\n    }\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/http-cache-semantics/index.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}}],"sources":{"../node_modules/http-cache-semantics/index.js":"'use strict';\n// rfc7231 6.1\nconst statusCodeCacheableByDefault = new Set([\n    200,\n    203,\n    204,\n    206,\n    300,\n    301,\n    404,\n    405,\n    410,\n    414,\n    501,\n]);\n\n// This implementation does not understand partial responses (206)\nconst understoodStatuses = new Set([\n    200,\n    203,\n    204,\n    300,\n    301,\n    302,\n    303,\n    307,\n    308,\n    404,\n    405,\n    410,\n    414,\n    501,\n]);\n\nconst errorStatusCodes = new Set([\n    500,\n    502,\n    503, \n    504,\n]);\n\nconst hopByHopHeaders = {\n    date: true, // included, because we add Age update Date\n    connection: true,\n    'keep-alive': true,\n    'proxy-authenticate': true,\n    'proxy-authorization': true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n};\n\nconst excludedFromRevalidationUpdate = {\n    // Since the old body is reused, it doesn't make sense to change properties of the body\n    'content-length': true,\n    'content-encoding': true,\n    'transfer-encoding': true,\n    'content-range': true,\n};\n\nfunction toNumberOrZero(s) {\n    const n = parseInt(s, 10);\n    return isFinite(n) ? n : 0;\n}\n\n// RFC 5861\nfunction isErrorResponse(response) {\n    // consider undefined response as faulty\n    if(!response) {\n        return true\n    }\n    return errorStatusCodes.has(response.status);\n}\n\nfunction parseCacheControl(header) {\n    const cc = {};\n    if (!header) return cc;\n\n    // TODO: When there is more than one value present for a given directive (e.g., two Expires header fields, multiple Cache-Control: max-age directives),\n    // the directive's value is considered invalid. Caches are encouraged to consider responses that have invalid freshness information to be stale\n    const parts = header.trim().split(/\\s*,\\s*/); // TODO: lame parsing\n    for (const part of parts) {\n        const [k, v] = part.split(/\\s*=\\s*/, 2);\n        cc[k] = v === undefined ? true : v.replace(/^\"|\"$/g, ''); // TODO: lame unquoting\n    }\n\n    return cc;\n}\n\nfunction formatCacheControl(cc) {\n    let parts = [];\n    for (const k in cc) {\n        const v = cc[k];\n        parts.push(v === true ? k : k + '=' + v);\n    }\n    if (!parts.length) {\n        return undefined;\n    }\n    return parts.join(', ');\n}\n\nmodule.exports = class CachePolicy {\n    constructor(\n        req,\n        res,\n        {\n            shared,\n            cacheHeuristic,\n            immutableMinTimeToLive,\n            ignoreCargoCult,\n            _fromObject,\n        } = {}\n    ) {\n        if (_fromObject) {\n            this._fromObject(_fromObject);\n            return;\n        }\n\n        if (!res || !res.headers) {\n            throw Error('Response headers missing');\n        }\n        this._assertRequestHasHeaders(req);\n\n        this._responseTime = this.now();\n        this._isShared = shared !== false;\n        this._cacheHeuristic =\n            undefined !== cacheHeuristic ? cacheHeuristic : 0.1; // 10% matches IE\n        this._immutableMinTtl =\n            undefined !== immutableMinTimeToLive\n                ? immutableMinTimeToLive\n                : 24 * 3600 * 1000;\n\n        this._status = 'status' in res ? res.status : 200;\n        this._resHeaders = res.headers;\n        this._rescc = parseCacheControl(res.headers['cache-control']);\n        this._method = 'method' in req ? req.method : 'GET';\n        this._url = req.url;\n        this._host = req.headers.host;\n        this._noAuthorization = !req.headers.authorization;\n        this._reqHeaders = res.headers.vary ? req.headers : null; // Don't keep all request headers if they won't be used\n        this._reqcc = parseCacheControl(req.headers['cache-control']);\n\n        // Assume that if someone uses legacy, non-standard uncecessary options they don't understand caching,\n        // so there's no point stricly adhering to the blindly copy&pasted directives.\n        if (\n            ignoreCargoCult &&\n            'pre-check' in this._rescc &&\n            'post-check' in this._rescc\n        ) {\n            delete this._rescc['pre-check'];\n            delete this._rescc['post-check'];\n            delete this._rescc['no-cache'];\n            delete this._rescc['no-store'];\n            delete this._rescc['must-revalidate'];\n            this._resHeaders = Object.assign({}, this._resHeaders, {\n                'cache-control': formatCacheControl(this._rescc),\n            });\n            delete this._resHeaders.expires;\n            delete this._resHeaders.pragma;\n        }\n\n        // When the Cache-Control header field is not present in a request, caches MUST consider the no-cache request pragma-directive\n        // as having the same effect as if \"Cache-Control: no-cache\" were present (see Section 5.2.1).\n        if (\n            res.headers['cache-control'] == null &&\n            /no-cache/.test(res.headers.pragma)\n        ) {\n            this._rescc['no-cache'] = true;\n        }\n    }\n\n    now() {\n        return Date.now();\n    }\n\n    storable() {\n        // The \"no-store\" request directive indicates that a cache MUST NOT store any part of either this request or any response to it.\n        return !!(\n            !this._reqcc['no-store'] &&\n            // A cache MUST NOT store a response to any request, unless:\n            // The request method is understood by the cache and defined as being cacheable, and\n            ('GET' === this._method ||\n                'HEAD' === this._method ||\n                ('POST' === this._method && this._hasExplicitExpiration())) &&\n            // the response status code is understood by the cache, and\n            understoodStatuses.has(this._status) &&\n            // the \"no-store\" cache directive does not appear in request or response header fields, and\n            !this._rescc['no-store'] &&\n            // the \"private\" response directive does not appear in the response, if the cache is shared, and\n            (!this._isShared || !this._rescc.private) &&\n            // the Authorization header field does not appear in the request, if the cache is shared,\n            (!this._isShared ||\n                this._noAuthorization ||\n                this._allowsStoringAuthenticated()) &&\n            // the response either:\n            // contains an Expires header field, or\n            (this._resHeaders.expires ||\n                // contains a max-age response directive, or\n                // contains a s-maxage response directive and the cache is shared, or\n                // contains a public response directive.\n                this._rescc['max-age'] ||\n                (this._isShared && this._rescc['s-maxage']) ||\n                this._rescc.public ||\n                // has a status code that is defined as cacheable by default\n                statusCodeCacheableByDefault.has(this._status))\n        );\n    }\n\n    _hasExplicitExpiration() {\n        // 4.2.1 Calculating Freshness Lifetime\n        return (\n            (this._isShared && this._rescc['s-maxage']) ||\n            this._rescc['max-age'] ||\n            this._resHeaders.expires\n        );\n    }\n\n    _assertRequestHasHeaders(req) {\n        if (!req || !req.headers) {\n            throw Error('Request headers missing');\n        }\n    }\n\n    satisfiesWithoutRevalidation(req) {\n        this._assertRequestHasHeaders(req);\n\n        // When presented with a request, a cache MUST NOT reuse a stored response, unless:\n        // the presented request does not contain the no-cache pragma (Section 5.4), nor the no-cache cache directive,\n        // unless the stored response is successfully validated (Section 4.3), and\n        const requestCC = parseCacheControl(req.headers['cache-control']);\n        if (requestCC['no-cache'] || /no-cache/.test(req.headers.pragma)) {\n            return false;\n        }\n\n        if (requestCC['max-age'] && this.age() > requestCC['max-age']) {\n            return false;\n        }\n\n        if (\n            requestCC['min-fresh'] &&\n            this.timeToLive() < 1000 * requestCC['min-fresh']\n        ) {\n            return false;\n        }\n\n        // the stored response is either:\n        // fresh, or allowed to be served stale\n        if (this.stale()) {\n            const allowsStale =\n                requestCC['max-stale'] &&\n                !this._rescc['must-revalidate'] &&\n                (true === requestCC['max-stale'] ||\n                    requestCC['max-stale'] > this.age() - this.maxAge());\n            if (!allowsStale) {\n                return false;\n            }\n        }\n\n        return this._requestMatches(req, false);\n    }\n\n    _requestMatches(req, allowHeadMethod) {\n        // The presented effective request URI and that of the stored response match, and\n        return (\n            (!this._url || this._url === req.url) &&\n            this._host === req.headers.host &&\n            // the request method associated with the stored response allows it to be used for the presented request, and\n            (!req.method ||\n                this._method === req.method ||\n                (allowHeadMethod && 'HEAD' === req.method)) &&\n            // selecting header fields nominated by the stored response (if any) match those presented, and\n            this._varyMatches(req)\n        );\n    }\n\n    _allowsStoringAuthenticated() {\n        //  following Cache-Control response directives (Section 5.2.2) have such an effect: must-revalidate, public, and s-maxage.\n        return (\n            this._rescc['must-revalidate'] ||\n            this._rescc.public ||\n            this._rescc['s-maxage']\n        );\n    }\n\n    _varyMatches(req) {\n        if (!this._resHeaders.vary) {\n            return true;\n        }\n\n        // A Vary header field-value of \"*\" always fails to match\n        if (this._resHeaders.vary === '*') {\n            return false;\n        }\n\n        const fields = this._resHeaders.vary\n            .trim()\n            .toLowerCase()\n            .split(/\\s*,\\s*/);\n        for (const name of fields) {\n            if (req.headers[name] !== this._reqHeaders[name]) return false;\n        }\n        return true;\n    }\n\n    _copyWithoutHopByHopHeaders(inHeaders) {\n        const headers = {};\n        for (const name in inHeaders) {\n            if (hopByHopHeaders[name]) continue;\n            headers[name] = inHeaders[name];\n        }\n        // 9.1.  Connection\n        if (inHeaders.connection) {\n            const tokens = inHeaders.connection.trim().split(/\\s*,\\s*/);\n            for (const name of tokens) {\n                delete headers[name];\n            }\n        }\n        if (headers.warning) {\n            const warnings = headers.warning.split(/,/).filter(warning => {\n                return !/^\\s*1[0-9][0-9]/.test(warning);\n            });\n            if (!warnings.length) {\n                delete headers.warning;\n            } else {\n                headers.warning = warnings.join(',').trim();\n            }\n        }\n        return headers;\n    }\n\n    responseHeaders() {\n        const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);\n        const age = this.age();\n\n        // A cache SHOULD generate 113 warning if it heuristically chose a freshness\n        // lifetime greater than 24 hours and the response's age is greater than 24 hours.\n        if (\n            age > 3600 * 24 &&\n            !this._hasExplicitExpiration() &&\n            this.maxAge() > 3600 * 24\n        ) {\n            headers.warning =\n                (headers.warning ? `${headers.warning}, ` : '') +\n                '113 - \"rfc7234 5.5.4\"';\n        }\n        headers.age = `${Math.round(age)}`;\n        headers.date = new Date(this.now()).toUTCString();\n        return headers;\n    }\n\n    /**\n     * Value of the Date response header or current time if Date was invalid\n     * @return timestamp\n     */\n    date() {\n        const serverDate = Date.parse(this._resHeaders.date);\n        if (isFinite(serverDate)) {\n            return serverDate;\n        }\n        return this._responseTime;\n    }\n\n    /**\n     * Value of the Age header, in seconds, updated for the current time.\n     * May be fractional.\n     *\n     * @return Number\n     */\n    age() {\n        let age = this._ageValue();\n\n        const residentTime = (this.now() - this._responseTime) / 1000;\n        return age + residentTime;\n    }\n\n    _ageValue() {\n        return toNumberOrZero(this._resHeaders.age);\n    }\n\n    /**\n     * Value of applicable max-age (or heuristic equivalent) in seconds. This counts since response's `Date`.\n     *\n     * For an up-to-date value, see `timeToLive()`.\n     *\n     * @return Number\n     */\n    maxAge() {\n        if (!this.storable() || this._rescc['no-cache']) {\n            return 0;\n        }\n\n        // Shared responses with cookies are cacheable according to the RFC, but IMHO it'd be unwise to do so by default\n        // so this implementation requires explicit opt-in via public header\n        if (\n            this._isShared &&\n            (this._resHeaders['set-cookie'] &&\n                !this._rescc.public &&\n                !this._rescc.immutable)\n        ) {\n            return 0;\n        }\n\n        if (this._resHeaders.vary === '*') {\n            return 0;\n        }\n\n        if (this._isShared) {\n            if (this._rescc['proxy-revalidate']) {\n                return 0;\n            }\n            // if a response includes the s-maxage directive, a shared cache recipient MUST ignore the Expires field.\n            if (this._rescc['s-maxage']) {\n                return toNumberOrZero(this._rescc['s-maxage']);\n            }\n        }\n\n        // If a response includes a Cache-Control field with the max-age directive, a recipient MUST ignore the Expires field.\n        if (this._rescc['max-age']) {\n            return toNumberOrZero(this._rescc['max-age']);\n        }\n\n        const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;\n\n        const serverDate = this.date();\n        if (this._resHeaders.expires) {\n            const expires = Date.parse(this._resHeaders.expires);\n            // A cache recipient MUST interpret invalid date formats, especially the value \"0\", as representing a time in the past (i.e., \"already expired\").\n            if (Number.isNaN(expires) || expires < serverDate) {\n                return 0;\n            }\n            return Math.max(defaultMinTtl, (expires - serverDate) / 1000);\n        }\n\n        if (this._resHeaders['last-modified']) {\n            const lastModified = Date.parse(this._resHeaders['last-modified']);\n            if (isFinite(lastModified) && serverDate > lastModified) {\n                return Math.max(\n                    defaultMinTtl,\n                    ((serverDate - lastModified) / 1000) * this._cacheHeuristic\n                );\n            }\n        }\n\n        return defaultMinTtl;\n    }\n\n    timeToLive() {\n        const age = this.maxAge() - this.age();\n        const staleIfErrorAge = age + toNumberOrZero(this._rescc['stale-if-error']);\n        const staleWhileRevalidateAge = age + toNumberOrZero(this._rescc['stale-while-revalidate']);\n        return Math.max(0, age, staleIfErrorAge, staleWhileRevalidateAge) * 1000;\n    }\n\n    stale() {\n        return this.maxAge() <= this.age();\n    }\n\n    _useStaleIfError() {\n        return this.maxAge() + toNumberOrZero(this._rescc['stale-if-error']) > this.age();\n    }\n\n    useStaleWhileRevalidate() {\n        return this.maxAge() + toNumberOrZero(this._rescc['stale-while-revalidate']) > this.age();\n    }\n\n    static fromObject(obj) {\n        return new this(undefined, undefined, { _fromObject: obj });\n    }\n\n    _fromObject(obj) {\n        if (this._responseTime) throw Error('Reinitialized');\n        if (!obj || obj.v !== 1) throw Error('Invalid serialization');\n\n        this._responseTime = obj.t;\n        this._isShared = obj.sh;\n        this._cacheHeuristic = obj.ch;\n        this._immutableMinTtl =\n            obj.imm !== undefined ? obj.imm : 24 * 3600 * 1000;\n        this._status = obj.st;\n        this._resHeaders = obj.resh;\n        this._rescc = obj.rescc;\n        this._method = obj.m;\n        this._url = obj.u;\n        this._host = obj.h;\n        this._noAuthorization = obj.a;\n        this._reqHeaders = obj.reqh;\n        this._reqcc = obj.reqcc;\n    }\n\n    toObject() {\n        return {\n            v: 1,\n            t: this._responseTime,\n            sh: this._isShared,\n            ch: this._cacheHeuristic,\n            imm: this._immutableMinTtl,\n            st: this._status,\n            resh: this._resHeaders,\n            rescc: this._rescc,\n            m: this._method,\n            u: this._url,\n            h: this._host,\n            a: this._noAuthorization,\n            reqh: this._reqHeaders,\n            reqcc: this._reqcc,\n        };\n    }\n\n    /**\n     * Headers for sending to the origin server to revalidate stale response.\n     * Allows server to return 304 to allow reuse of the previous response.\n     *\n     * Hop by hop headers are always stripped.\n     * Revalidation headers may be added or removed, depending on request.\n     */\n    revalidationHeaders(incomingReq) {\n        this._assertRequestHasHeaders(incomingReq);\n        const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers);\n\n        // This implementation does not understand range requests\n        delete headers['if-range'];\n\n        if (!this._requestMatches(incomingReq, true) || !this.storable()) {\n            // revalidation allowed via HEAD\n            // not for the same resource, or wasn't allowed to be cached anyway\n            delete headers['if-none-match'];\n            delete headers['if-modified-since'];\n            return headers;\n        }\n\n        /* MUST send that entity-tag in any cache validation request (using If-Match or If-None-Match) if an entity-tag has been provided by the origin server. */\n        if (this._resHeaders.etag) {\n            headers['if-none-match'] = headers['if-none-match']\n                ? `${headers['if-none-match']}, ${this._resHeaders.etag}`\n                : this._resHeaders.etag;\n        }\n\n        // Clients MAY issue simple (non-subrange) GET requests with either weak validators or strong validators. Clients MUST NOT use weak validators in other forms of request.\n        const forbidsWeakValidators =\n            headers['accept-ranges'] ||\n            headers['if-match'] ||\n            headers['if-unmodified-since'] ||\n            (this._method && this._method != 'GET');\n\n        /* SHOULD send the Last-Modified value in non-subrange cache validation requests (using If-Modified-Since) if only a Last-Modified value has been provided by the origin server.\n        Note: This implementation does not understand partial responses (206) */\n        if (forbidsWeakValidators) {\n            delete headers['if-modified-since'];\n\n            if (headers['if-none-match']) {\n                const etags = headers['if-none-match']\n                    .split(/,/)\n                    .filter(etag => {\n                        return !/^\\s*W\\//.test(etag);\n                    });\n                if (!etags.length) {\n                    delete headers['if-none-match'];\n                } else {\n                    headers['if-none-match'] = etags.join(',').trim();\n                }\n            }\n        } else if (\n            this._resHeaders['last-modified'] &&\n            !headers['if-modified-since']\n        ) {\n            headers['if-modified-since'] = this._resHeaders['last-modified'];\n        }\n\n        return headers;\n    }\n\n    /**\n     * Creates new CachePolicy with information combined from the previews response,\n     * and the new revalidation response.\n     *\n     * Returns {policy, modified} where modified is a boolean indicating\n     * whether the response body has been modified, and old cached body can't be used.\n     *\n     * @return {Object} {policy: CachePolicy, modified: Boolean}\n     */\n    revalidatedPolicy(request, response) {\n        this._assertRequestHasHeaders(request);\n        if(this._useStaleIfError() && isErrorResponse(response)) {  // I consider the revalidation request unsuccessful\n          return {\n            modified: false,\n            matches: false,\n            policy: this,\n          };\n        }\n        if (!response || !response.headers) {\n            throw Error('Response headers missing');\n        }\n\n        // These aren't going to be supported exactly, since one CachePolicy object\n        // doesn't know about all the other cached objects.\n        let matches = false;\n        if (response.status !== undefined && response.status != 304) {\n            matches = false;\n        } else if (\n            response.headers.etag &&\n            !/^\\s*W\\//.test(response.headers.etag)\n        ) {\n            // \"All of the stored responses with the same strong validator are selected.\n            // If none of the stored responses contain the same strong validator,\n            // then the cache MUST NOT use the new response to update any stored responses.\"\n            matches =\n                this._resHeaders.etag &&\n                this._resHeaders.etag.replace(/^\\s*W\\//, '') ===\n                    response.headers.etag;\n        } else if (this._resHeaders.etag && response.headers.etag) {\n            // \"If the new response contains a weak validator and that validator corresponds\n            // to one of the cache's stored responses,\n            // then the most recent of those matching stored responses is selected for update.\"\n            matches =\n                this._resHeaders.etag.replace(/^\\s*W\\//, '') ===\n                response.headers.etag.replace(/^\\s*W\\//, '');\n        } else if (this._resHeaders['last-modified']) {\n            matches =\n                this._resHeaders['last-modified'] ===\n                response.headers['last-modified'];\n        } else {\n            // If the new response does not include any form of validator (such as in the case where\n            // a client generates an If-Modified-Since request from a source other than the Last-Modified\n            // response header field), and there is only one stored response, and that stored response also\n            // lacks a validator, then that stored response is selected for update.\n            if (\n                !this._resHeaders.etag &&\n                !this._resHeaders['last-modified'] &&\n                !response.headers.etag &&\n                !response.headers['last-modified']\n            ) {\n                matches = true;\n            }\n        }\n\n        if (!matches) {\n            return {\n                policy: new this.constructor(request, response),\n                // Client receiving 304 without body, even if it's invalid/mismatched has no option\n                // but to reuse a cached body. We don't have a good way to tell clients to do\n                // error recovery in such case.\n                modified: response.status != 304,\n                matches: false,\n            };\n        }\n\n        // use other header fields provided in the 304 (Not Modified) response to replace all instances\n        // of the corresponding header fields in the stored response.\n        const headers = {};\n        for (const k in this._resHeaders) {\n            headers[k] =\n                k in response.headers && !excludedFromRevalidationUpdate[k]\n                    ? response.headers[k]\n                    : this._resHeaders[k];\n        }\n\n        const newResponse = Object.assign({}, response, {\n            status: this._status,\n            method: this._method,\n            headers,\n        });\n        return {\n            policy: new this.constructor(request, newResponse, {\n                shared: this._isShared,\n                cacheHeuristic: this._cacheHeuristic,\n                immutableMinTimeToLive: this._immutableMinTtl,\n            }),\n            modified: false,\n            matches: true,\n        };\n    }\n};\n"},"lineCount":674}},"error":null,"hash":"6e1a9b14ddd70615b1b4cc43755d55ec","cacheData":{"env":{}}}